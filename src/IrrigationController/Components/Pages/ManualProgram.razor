@using IrrigationController.Core
@using IrrigationController.Core.Domain
@using IrrigationController.Core.Infrastructure
@inject Config Config
@inject GetValveStatusUseCase GetValveStatusUseCase
@inject RunProgramUseCase RunProgramUseCase
@implements IDisposable

<h1>Manual Program</h1>

<EditForm Model="this" OnSubmit="Submit">
    @for (int i = 0; i < this.Config.Valves.Count; i++)
    {
        int stepIndex = i;
        bool defective = this.defectiveValves.Contains(i);

        <label style="width: 100px;">@this.Config.Valves[i].Name</label>
        <InputNumber @bind-Value="Durations[stepIndex]" min="1" max="60" disabled="@defective" />
        <br />
    }

    <p>
        <button type="submit" class="btn btn-primary">Run</button>
    </p>
</EditForm>

@code {
    private List<int> defectiveValves = [];

    [SupplyParameterFromForm]
    private List<int?> Durations { get; set; } = [];

    protected override void OnInitialized()
    {
        this.Durations = this.Config.Valves.Select(_ => (int?)null).ToList();
        this.GetValveStatusUseCase.StatusChanged += this.OnStatusChanged;
        (_, this.defectiveValves) = this.GetValveStatusUseCase.Execute();
    }

    private void OnStatusChanged(object? sender, EventArgs e)
    {
        InvokeAsync(() =>
        {
            (_, this.defectiveValves) = this.GetValveStatusUseCase.Execute();
            foreach (int i in this.defectiveValves)
            {
                this.Durations[i] = null;
            }

            StateHasChanged();
        });
    }

    private void Submit()
    {
        List<ProgramStep> programSteps = new List<ProgramStep>();
        for (int i = 0; i < this.Config.Valves.Count; i++)
        {
            int? duration = this.Durations[i];
            if (duration is null || duration == 0)
            {
                continue;
            }

            programSteps.Add(new ProgramStep(i, TimeSpan.FromMinutes(duration.Value)));
            this.Durations[i] = null;
        }

        if (programSteps.Count == 0)
        {
            return;
        }

        this.RunProgramUseCase.Execute(new Core.Domain.Program(programSteps));
    }

    public void Dispose()
    {
        this.GetValveStatusUseCase.StatusChanged -= this.OnStatusChanged;
    }
}
