@using IrrigationController.Core
@using IrrigationController.Core.Domain
@using IrrigationController.Core.Infrastructure
@inject Config Config
@inject GetZoneStatusUseCase GetZoneStatusUseCase
@inject RunProgramUseCase RunProgramUseCase
@implements IDisposable

<h1>Manual Program</h1>

<EditForm Model="this" OnSubmit="Submit">
    @for (int i = 0; i < this.Config.Zones.Count; i++)
    {
        if (!Config.Zones[i].Enabled)
        {
            continue;
        }

        int zoneId = i;
        bool defective = this.defectiveZoneIds.Contains(i);

        <label style="width: 100px;">@this.Config.Zones[i].Name</label>
        <InputNumber @bind-Value="Durations[zoneId]" min="1" max="60" disabled="@defective" />
        <br />
    }

    <p>
        <button type="submit" class="btn btn-primary">Run</button>
    </p>
</EditForm>

@code {
    private List<int> defectiveZoneIds = [];

    [SupplyParameterFromForm]
    private List<int?> Durations { get; set; } = [];

    protected override void OnInitialized()
    {
        this.Durations = this.Config.Zones.Select(_ => (int?)null).ToList();
        this.GetZoneStatusUseCase.StatusChanged += this.OnStatusChanged;
        (_, this.defectiveZoneIds) = this.GetZoneStatusUseCase.Execute();
    }

    private void OnStatusChanged(object? sender, EventArgs e)
    {
        InvokeAsync(() =>
        {
            (_, this.defectiveZoneIds) = this.GetZoneStatusUseCase.Execute();
            foreach (int i in this.defectiveZoneIds)
            {
                this.Durations[i] = null;
            }

            StateHasChanged();
        });
    }

    private void Submit()
    {
        List<ZoneDuration> zones = new List<ZoneDuration>();
        for (int i = 0; i < this.Config.Zones.Count; i++)
        {
            int? duration = this.Durations[i];
            if (duration is null || duration == 0)
            {
                continue;
            }

            zones.Add(new ZoneDuration(i, TimeSpan.FromMinutes(duration.Value)));
            this.Durations[i] = null;
        }

        if (zones.Count == 0)
        {
            return;
        }

        this.RunProgramUseCase.Execute(zones);
    }

    public void Dispose()
    {
        this.GetZoneStatusUseCase.StatusChanged -= this.OnStatusChanged;
    }
}
