@using IrrigationController.Core.Domain
@inject Config Config

@foreach (string line in this.log)
{
    @((MarkupString)line)
    <br />
}

@code
{
    private List<string> log = [];

    [Parameter]
    public IReadOnlyList<IIrrigationEvent> Events { get; set; } = [];

    protected override void OnParametersSet()
    {
        this.log = this.Events.Select(x => $"<b>{x.Timestamp.ToLocalTime():yyyy-MM-dd HH:mm:ss}</b> {this.ToString(x)}").ToList();
    }

    private string ToString(IIrrigationEvent e) => e switch
    {
        ZoneOpened x => $"<i>{this.Config.Zones[x.ZoneId].Name}</i> {ToString(x.Reason)} for {FormatHelper.Format(x.For)}",
        ZoneClosed x => $"<i>{this.Config.Zones[x.ZoneId].Name}</i> {ToString(x.Reason)} after {FormatHelper.Format(x.After)}",
        RainDetected => $"Rain detected",
        RainCleared => $"Rain cleared",
        ShortCircuitDetected x => $"Short circuit detected in <i>{this.Config.Zones[x.ZoneId].Name}</i>",
        ShortCircuitResolved x => $"Short circuit resolved in <i>{this.Config.Zones[x.ZoneId].Name}</i>",
        _ => e.ToString()!
    };
    
    private string ToString(IrrigationStartReason reason) => reason switch
    {
        IrrigationStartReason.Manual => "opened manually",
        IrrigationStartReason.ManualProgram => "opened by manual program",
        IrrigationStartReason.Algorithm => "opened by schedule",
        IrrigationStartReason.FallbackAlgorithm => "opened by fallback schedule",
        _ => reason.ToString()
    };
    private string ToString(IrrigationStopReason reason) => reason switch
    {
        IrrigationStopReason.Manual => "closed manually",
        IrrigationStopReason.Rain => "closed due to rain",
        IrrigationStopReason.Completed => "completed",
        IrrigationStopReason.Algorithm => "closed by conflicting schedule",
        IrrigationStopReason.ShortCircuit => "closed due to short circuit",
        IrrigationStopReason.Shutdown => "closed by shutdown",
        _ => reason.ToString()
    };
}
