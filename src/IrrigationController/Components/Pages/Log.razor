@using IrrigationController.Core.Domain
@inject Config Config

@foreach (string line in this.log)
{
    @((MarkupString)line)
    <br />
}

@code
{
    private List<string> log = [];

    [Parameter]
    public IReadOnlyList<IIrrigationEvent> Events { get; set; } = [];

    protected override void OnParametersSet()
    {
        this.log = this.Events.Select(x => $"<b>{x.Timestamp.ToLocalTime():yyyy-MM-dd HH:mm:ss}</b> {this.ToString(x)}").ToList();
    }

    private string ToString(IIrrigationEvent e) => e switch
    {
        IrrigationStarted x => $"Irrigation started {ToString(x.Reason)}: {ToString(x.Zones, "for")}",
        IrrigationSkipped x => $"Irrigation of <i>{this.Config.Zones[x.ZoneId].Name}</i> {ToString(x.Reason)} after {x.After:mm\\:ss}",
        IrrigationStopped x => $"Irrigation {ToString(x.Reason)}: {ToString(x.Zones, "after")}",
        RainDetected => $"Rain detected",
        RainCleared => $"Rain cleared",
        ShortCircuitDetected x => $"Short circuit detected: <i>{this.Config.Zones[x.ZoneId].Name}</i>",
        ShortCircuitResolved x => $"Short circuit resolved: <i>{this.Config.Zones[x.ZoneId].Name}</i>",
        _ => e.ToString()!
    };
    
    private string ToString(IrrigationStartReason reason) => reason switch
    {
        IrrigationStartReason.Manual => "manually",
        IrrigationStartReason.Algorithm => "due to low soil moisture",
        IrrigationStartReason.FallbackAlgorithm => "by the fallback algorithm",
        _ => reason.ToString()
    };
    private string ToString(IrrigationStopReason reason) => reason switch
    {
        IrrigationStopReason.Manual => "stopped manually",
        IrrigationStopReason.Rain => "stopped due to rain",
        IrrigationStopReason.Completed => "completed",
        IrrigationStopReason.Algorithm => "stopped by the algorithm",
        IrrigationStopReason.ShortCircuit => "stopped by short circuit",
        IrrigationStopReason.Shutdown => "stopped by shutdown",
        _ => reason.ToString()
    };
    private string ToString(IrrigationSkipReason reason) => reason switch
    {
        IrrigationSkipReason.Manual => "skipped manually",
        IrrigationSkipReason.ShortCircuit => "skipped by short circuit",
        _ => reason.ToString()
    };
    private string ToString(IEnumerable<ZoneDuration> zones, string glue) => string.Join(", ", zones.Select(x => $"<i>{this.Config.Zones[x.ZoneId].Name}</i> {glue} {FormatHelper.Format(x.Duration)}"));
}
