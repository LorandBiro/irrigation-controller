@using IrrigationController.Core.Domain
@using IrrigationController.Core.UseCases
@inject GetProgramStatusUseCase GetProgramStatusUseCase
@inject SkipUseCase SkipUseCase
@inject StopUseCase StopUseCase
@inject Config Config
@implements IDisposable

<h1>Status</h1>

<p>Rain sensor: @(GetProgramStatusUseCase.IsRaining ? "Raining" : "Clear")</p>

@if (this.GetProgramStatusUseCase.CurrentStep == null || this.GetProgramStatusUseCase.CurrentStepEndsAt == null)
{
    <p>No program is running</p>
}
else
{
    TimeSpan timeLeft = this.GetProgramStatusUseCase.CurrentStepEndsAt.Value - DateTime.UtcNow;
    timeLeft = TimeSpan.FromSeconds(Math.Round(timeLeft.TotalSeconds));
    ProgramStep currentStep = this.GetProgramStatusUseCase.CurrentStep;
    string name = this.Config.Valves[currentStep.ValveId].Name;

    <ul>
        <li>@name - @FormatTime(timeLeft)</li>
        @foreach (ProgramStep step in this.GetProgramStatusUseCase.NextSteps)
        {
            <li>@this.Config.Valves[step.ValveId].Name - @FormatTime(step.Duration)</li>
        }
    </ul>

    <p>
        <button class="btn btn-primary" @onclick="() => this.SkipUseCase.Execute()">Skip</button>
        <button class="btn btn-danger" @onclick="() => this.StopUseCase.Execute()">Stop</button>
    </p>
}

@code
{
    private readonly Timer timer;

    public Status()
    {
        this.timer = new Timer(_ => this.InvokeAsync(this.StateHasChanged));
    }

    protected override void OnInitialized()
    {
        this.GetProgramStatusUseCase.CurrentStepChanged += OnCurrentStepChanged;
        this.GetProgramStatusUseCase.IsRainingChanged += OnIsRainingChanged;
        this.StartTimer();
    }

    private void OnCurrentStepChanged(object? sender, EventArgs e)
    {
        this.StartTimer();
        this.InvokeAsync(this.StateHasChanged);
    }

    private void OnIsRainingChanged(object? sender, EventArgs e)
    {
        this.InvokeAsync(this.StateHasChanged);
    }

    private void StartTimer()
    {
        if (this.GetProgramStatusUseCase.CurrentStepEndsAt == null)
        {
            return;
        }

        TimeSpan timeLeft = this.GetProgramStatusUseCase.CurrentStepEndsAt.Value - DateTime.UtcNow;
        this.timer.Change(timeLeft.Milliseconds, 1000);
    }

    private string FormatTime(TimeSpan time)
    {
        return time.ToString(time.TotalHours >= 1 ? @"h\:mm\:ss" : @"mm\:ss");
    }

    public void Dispose()
    {
        this.GetProgramStatusUseCase.CurrentStepChanged -= OnCurrentStepChanged;
        this.GetProgramStatusUseCase.IsRainingChanged -= OnIsRainingChanged;
        this.timer.Dispose();
    }
}
