@page "/manual"
@using IrrigationController.Core
@inject GetValveStatusUseCase GetValveStatusUseCase
@inject OpenValveUseCase OpenValveUseCase
@inject CloseValveUseCase CloseValveUseCase
@implements IDisposable

<PageTitle>Manual</PageTitle>

<h1>Manual</h1>
@for (int i = 0; i < valveNames.Count; i++)
{
    int valveId = i;
    <button class="btn @(i == openValve ? "btn-primary" : "btn-secondary")" @onclick="() => OpenValve(valveId)" style="margin: 12px;">Open #@(i + 1) - @valveNames[i]</button>
}

<br />
<button class="btn btn-danger" @onclick="CloseValve" style="margin: 12px;">Close all</button>

@code {
    IReadOnlyList<string> valveNames = Array.Empty<string>();
    int? openValve;

    protected override void OnInitialized()
    {
        (valveNames, openValve) = GetValveStatusUseCase.Execute();
        GetValveStatusUseCase.OpenValveIdChanged += OnOpenValveIdChanged;
    }

    private void OnOpenValveIdChanged(object? sender, int? openValveId)
    {
        InvokeAsync(() =>
        {
            openValve = openValveId;
            StateHasChanged();
        });
    }

    private void OpenValve(int valveId)
    {
        OpenValveUseCase.Execute(valveId);
        openValve = valveId;
    }

    private void CloseValve()
    {
        CloseValveUseCase.Execute();
        openValve = null;
    }

    public void Dispose()
    {
        GetValveStatusUseCase.OpenValveIdChanged -= OnOpenValveIdChanged;
    }
}
