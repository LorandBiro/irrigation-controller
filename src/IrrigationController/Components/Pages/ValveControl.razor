@using IrrigationController.Core.Domain
@using IrrigationController.Core.Infrastructure
@using IrrigationController.Core.UseCases
@inject Config Config
@inject GetValveStatusUseCase GetValveStatusUseCase
@inject OpenValveUseCase OpenValveUseCase
@inject StopUseCase StopUseCase
@implements IDisposable

<h1>Valve Control</h1>
<p>
    @for (int i = 0; i < Config.Valves.Count; i++)
    {
        int valveId = i;
        bool open = GetValveStatusUseCase.OpenValveId == valveId;
        <button class="btn @(open ? "btn-primary" : "btn-secondary")" @onclick="() => OnClick(valveId)">@(open ? "Close" : "Open") #@(i + 1) - @Config.Valves[i].Name</button>
        <text>&nbsp;</text>
    }
</p>

@code {
    protected override void OnInitialized()
    {
        GetValveStatusUseCase.OpenValveIdChanged += OnOpenValveIdChanged;
    }

    private void OnOpenValveIdChanged(object? sender, int? openValveId)
    {
        InvokeAsync(StateHasChanged);
    }

    private void OnClick(int valveId)
    {
        if (GetValveStatusUseCase.OpenValveId == valveId)
        {
            StopUseCase.Execute();
        }
        else
        {
            OpenValveUseCase.Execute(valveId);
        }
    }

    public void Dispose()
    {
        GetValveStatusUseCase.OpenValveIdChanged -= OnOpenValveIdChanged;
    }
}
