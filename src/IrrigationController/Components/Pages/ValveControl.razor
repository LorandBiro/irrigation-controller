@using IrrigationController.Core
@using IrrigationController.Core.Domain
@using IrrigationController.Core.Infrastructure
@inject Config Config
@inject GetValveStatusUseCase GetValveStatusUseCase
@inject OpenValveUseCase OpenValveUseCase
@inject StopUseCase StopUseCase
@inject FixValveUseCase FixValveUseCase
@inject IJSRuntime JsRuntime
@implements IDisposable

<h1>Valve Control</h1>
<p>
    @for (int i = 0; i < Config.Valves.Count; i++)
    {
        int valveId = i;
        bool open = this.openValveId == valveId;
        bool defective = this.defectiveValves.Contains(valveId);
        string style = defective ? "btn-danger" : (open ? "btn-primary" : "btn-secondary");
        string label = defective ? "Fix" : (open ? "Close" : "Open");

        <button class="btn @style" @onclick="() => OnClick(valveId)">@label #@(i + 1) - @Config.Valves[i].Name</button>
        <text>&nbsp;</text>
    }
</p>

@code {
    private int? openValveId;
    private List<int> defectiveValves = [];

    protected override void OnInitialized()
    {
        this.GetValveStatusUseCase.StatusChanged += this.OnStatusChanged;
        (this.openValveId, this.defectiveValves) = this.GetValveStatusUseCase.Execute();
    }

    private void OnStatusChanged(object? sender, EventArgs e)
    {
        InvokeAsync(() =>
        {
            (this.openValveId, this.defectiveValves) = this.GetValveStatusUseCase.Execute();
            StateHasChanged();
        });
    }

    private async Task OnClick(int valveId)
    {
        if (this.defectiveValves.Contains(valveId))
        {
            bool confirmed = await this.JsRuntime.InvokeAsync<bool>("confirm", "A short circuit was detected and the valve has been marked defective. Are you sure you want to re-enable it?");
            if (confirmed)
            {
                this.FixValveUseCase.Execute(valveId);
            }

            return;
        }

        if (this.openValveId == valveId)
        {
            this.StopUseCase.Execute();
        }
        else
        {
            this.OpenValveUseCase.Execute(valveId);
        }
    }

    public void Dispose()
    {
        this.GetValveStatusUseCase.StatusChanged -= this.OnStatusChanged;
    }
}
