@using IrrigationController.Core.Domain
@using IrrigationController.Core.Infrastructure
@using IrrigationController.Core.UseCases
@inject Config Config
@inject GetValveStatusUseCase GetValveStatusUseCase
@inject OpenValveUseCase OpenValveUseCase
@inject StopUseCase StopUseCase
@implements IDisposable

<h1>Valve Control</h1>
<p>
    @for (int i = 0; i < Config.Valves.Count; i++)
    {
        int valveId = i;
        bool open = this.openValveId == valveId;
        bool defective = this.defectiveValves.Contains(valveId);
        <button class="btn @(open ? "btn-primary" : "btn-secondary")" @onclick="() => OnClick(valveId)" disabled="@defective">@(open ? "Close" : "Open") #@(i + 1) - @Config.Valves[i].Name</button>
        <text>&nbsp;</text>
    }
</p>

@code {
    private int? openValveId;
    private List<int> defectiveValves = [];

    protected override void OnInitialized()
    {
        this.GetValveStatusUseCase.StatusChanged += OnStatusChanged;
        (this.openValveId, this.defectiveValves) = this.GetValveStatusUseCase.Execute();
    }

    private void OnStatusChanged(object? sender, EventArgs e)
    {
        InvokeAsync(() =>
        {
            (this.openValveId, this.defectiveValves) = this.GetValveStatusUseCase.Execute();
            StateHasChanged();
        });
    }

    private void OnClick(int valveId)
    {
        if (this.openValveId == valveId)
        {
            StopUseCase.Execute();
        }
        else
        {
            OpenValveUseCase.Execute(valveId);
        }
    }

    public void Dispose()
    {
        GetValveStatusUseCase.StatusChanged -= OnStatusChanged;
    }
}
